
@{
    ViewData["Title"] = "Graph";
}

@model DataUtility.MultiVariateNetwork

@section Styles {
    <link rel="stylesheet" href="~/css/controls.css" type="text/css" />
    <link rel="stylesheet" href="~/css/attributes.css" type="text/css" />
    <link rel="stylesheet" href="~/css/tab.css" type="text/css" />
    <link rel="stylesheet" href="~/css/graph.css" type="text/css" />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css">
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>


}




<div class="row">
    <div class="col-sm-2">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="#" onclick="openTab(event, 'attributes')" id="defaultTab">Atributes</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" onclick="openTab(event, 'settings')">Graph Settings</a>
            </li>
        </ul>
        <div class="tabcontent attributes scrollbar-deep-purple bordered-deep-purple thin" id="attributes">
            @foreach (var pair in Model.VectorData.NumAtrrExtremes)
            {
            <div class="numeric">
                <p><label>@pair.Key</label></p>
                <div id="@(pair.Key + "-slider")"></div>
                <script>createDoubleSlider('@(pair.Key + "-slider")', '@(pair.Key + "-sliderOutput1")', '@(pair.Key + "-sliderOutput2")', @pair.Value.minAttrValue, @pair.Value.maxAttrValue)</script>
                <div class="row">
                    <div class="col-md-4">
                        <input type="number" id="@(pair.Key + "-sliderOutput1")" min="@pair.Value.minAttrValue" max="@pair.Value.maxAttrValue" value="@pair.Value.minAttrValue" step="0.01" onchange="$('#' + '@(pair.Key + "-slider")').slider('option', 'value', this.value); filterByMinValue(this.value, @pair.Key);">
                    </div>
                    <div class="col-md-4 col-md-offset-4">
                        <input type="number" id="@(pair.Key + "-sliderOutput2")" min="@pair.Value.minAttrValue" max="@pair.Value.maxAttrValue" value="@pair.Value.maxAttrValue" step="0.01" onchange="$('#' + '@(pair.Key + "-slider")').slider('option', 'value', this.value); filterByMaxValue(this.value, @pair.Key);">
                    </div>
                </div>
            </div>
            }

        </div>
        <div class="tabcontent controls" id="settings">
            <div class="force alpha">
                <p><label>alpha</label> Simulation activity</p>
                <div class="alpha_bar" onclick="updateAll();"><div id="alpha_value"></div></div>
            </div>
            <div class="force">
                <p><label>center</label> Shifts the view, so the graph is centered at this location.</p>
                <label>
                    x
                    <output id="center_XSliderOutput">.5</output>
                    <input type="range" min="0" max="1" value=".5" step="0.01" oninput="d3.select('#center_XSliderOutput').text(value); forceProperties.center.x = value; updateAll();">
                </label>
                <label>
                    y
                    <output id="center_YSliderOutput">.5</output>
                    <input type="range" min="0" max="1" value=".5" step="0.01" oninput="d3.select('#center_YSliderOutput').text(value); forceProperties.center.y=value; updateAll();">
                </label>
            </div>

            <div class="force">
                <p><label><input type="checkbox" checked onchange="forceProperties.charge.enabled = this.checked; updateAll();"> charge</label> Attracts (+) or repels (-) nodes to/from each other.</p>
                <label title="Negative strength repels nodes. Positive strength attracts nodes.">
                    strength
                    <output id="charge_StrengthSliderOutput">-30</output>
                    <input type="range" min="-200" max="50" value="-30" step=".1" oninput="d3.select('#charge_StrengthSliderOutput').text(value); forceProperties.charge.strength=value; updateAll();">
                </label>
                <label title="Minimum distance where force is applied">
                    distanceMin
                    <output id="charge_distanceMinSliderOutput">1</output>
                    <input type="range" min="0" max="50" value="1" step=".1" oninput="d3.select('#charge_distanceMinSliderOutput').text(value); forceProperties.charge.distanceMin=value; updateAll();">
                </label>
                <label title="Maximum distance where force is applied">
                    distanceMax
                    <output id="charge_distanceMaxSliderOutput">2000</output>
                    <input type="range" min="0" max="2000" value="2000" step=".1" oninput="d3.select('#charge_distanceMaxSliderOutput').text(value); forceProperties.charge.distanceMax=value; updateAll();">
                </label>
            </div>

            <div class="force">
                <p><label><input type="checkbox" checked onchange="forceProperties.collide.enabled = this.checked; updateAll();"> collide</label> Prevents nodes from overlapping</p>
                <label>
                    strength
                    <output id="collide_StrengthSliderOutput">.7</output>
                    <input type="range" min="0" max="2" value=".7" step=".1" oninput="d3.select('#collide_StrengthSliderOutput').text(value); forceProperties.collide.strength=value; updateAll();">
                </label>
                <label title="Size of nodes">
                    radius
                    <output id="collide_radiusSliderOutput">5</output>
                    <input type="range" min="0" max="100" value="5" step="1" oninput="d3.select('#collide_radiusSliderOutput').text(value); forceProperties.collide.radius=value; updateAll();">
                </label>
                <label title="Higher values increase rigidity of the nodes (WARNING: high values are computationally expensive)">
                    iterations
                    <output id="collide_iterationsSliderOutput">1</output>
                    <input type="range" min="1" max="10" value="1" step="1" oninput="d3.select('#collide_iterationsSliderOutput').text(value); forceProperties.collide.iterations=value; updateAll();">
                </label>
            </div>

            <div class="force">
                <p><label><input type="checkbox" checked onchange="forceProperties.forceX.enabled = this.checked; updateAll();"> forceX</label> Acts like gravity. Pulls all points towards an X location.</p>
                <label>
                    strength
                    <output id="forceX_StrengthSliderOutput">.1</output>
                    <input type="range" min="0" max="1" value=".1" step="0.01" oninput="d3.select('#forceX_StrengthSliderOutput').text(value); forceProperties.forceX.strength=value; updateAll();">
                </label>
                <label title="The X location that the force will push the nodes to (NOTE: This demo multiplies by the svg width)">
                    x
                    <output id="forceX_XSliderOutput">.5</output>
                    <input type="range" min="0" max="1" value=".5" step="0.01" oninput="d3.select('#forceX_XSliderOutput').text(value); forceProperties.forceX.x=value; updateAll();">
                </label>
            </div>

            <div class="force">
                <p><label><input type="checkbox" checked onchange="forceProperties.forceY.enabled = this.checked; updateAll();"> forceY</label> Acts like gravity. Pulls all points towards a Y location.</p>
                <label>
                    strength
                    <output id="forceY_StrengthSliderOutput">.1</output>
                    <input type="range" min="0" max="1" value=".1" step="0.01" oninput="d3.select('#forceY_StrengthSliderOutput').text(value); forceProperties.forceY.strength=value; updateAll();">
                </label>
                <label title="The Y location that the force will push the nodes to (NOTE: This demo multiplies by the svg height)">
                    y
                    <output id="forceY_YSliderOutput">.5</output>
                    <input type="range" min="0" max="1" value=".5" step="0.01" oninput="d3.select('#forceY_YSliderOutput').text(value); forceProperties.forceY.y=value; updateAll(); ">
                </label>
            </div>

            <div class="force">
                <p><label><input type="checkbox" checked onchange="forceProperties.link.enabled = this.checked; updateAll();"> link</label> Sets link length</p>
                <label title="The force will push/pull nodes to make links this long">
                    distance
                    <output id="link_DistanceSliderOutput">30</output>
                    <input type="range" min="0" max="100" value="30" step="1" oninput="d3.select('#link_DistanceSliderOutput').text(value); forceProperties.link.distance=value; updateAll();">
                </label>
                <label title="Higher values increase rigidity of the links (WARNING: high values are computationally expensive)">
                    iterations
                    <output id="link_IterationsSliderOutput">1</output>
                    <input type="range" min="1" max="10" value="1" step="1" oninput="d3.select('#link_IterationsSliderOutput').text(value); forceProperties.link.iterations=value; updateAll();">
                </label>
            </div>
            <div class="force">
                <p><label><input type="checkbox" onchange="forceProperties.radial.enabled = this.checked; updateAll();"> Radial</label> Creates a new positioning force towards a circle of the specified radius.</p>
                <label>
                    x
                    <output id="radial_XSliderOutput">.5</output>
                    <input type="range" min="0" max="1" value=".5" step="0.01" oninput="d3.select('#radial_XSliderOutput').text(value); forceProperties.radial.x = value; updateAll();">
                </label>
                <label>
                    y
                    <output id="radial_YSliderOutput">.5</output>
                    <input type="range" min="0" max="1" value=".5" step="0.01" oninput="d3.select('#radial_YSliderOutput').text(value); forceProperties.radial.y=value; updateAll();">
                </label>
                <label>
                    strength
                    <output id="radial_StrengthSliderOutput">.1</output>
                    <input type="range" min="0" max="1" value=".1" step="0.01" oninput="d3.select('#radial_StrengthSliderOutput').text(value); forceProperties.radial.strength = value; updateAll();">
                </label>
                <label>
                    radius
                    <output id="radial_radiusSliderOutput">1</output>
                    <input type="range" min="0" max="100" value="1" step="1" oninput="d3.select('#radial_radiusSliderOutput').text(value); forceProperties.radial.radius=value; updateAll();">
                </label>

            </div>
        </div>
        <script>
            // Get the element with id="defaultOpen" and click on it
            $('#defaultTab').click();
        </script>
    </div>
    <div class="col-sm-8" style="">
        <svg viewBox="0 0 1080 1080" preserveAspectRatio="xMidYMid meet"></svg>
        <script src="https://d3js.org/d3.v4.min.js"></script>
        <script src="~/js/graph.js"></script>
        <script>
        drawNetwork(@Html.Raw(Model.ToD3Json()));
        </script>
    </div>
    <div class="col-sm-2 form-group" id="node_properties">



    </div>
</div>














